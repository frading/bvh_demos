{
	"type": "pointsBuilder",
	"nodes": {
		"globals1": {
			"type": "globals"
		},
		"output1": {
			"type": "output",
			"inputs": [
				null,
				null,
				{
					"index": 2,
					"inputName": "color",
					"node": "laserColor1",
					"output": "baseColor"
				},
				{
					"index": 3,
					"inputName": "alpha",
					"node": "multAdd6",
					"output": "val"
				},
				null,
				{
					"index": 5,
					"inputName": "gl_PointSize",
					"node": "multAdd4",
					"output": "val"
				}
			]
		},
		"disk1": {
			"type": "disk",
			"params": {
				"position": {
					"overriden_options": {}
				},
				"center": {
					"raw_input": [0.5, 0.5],
					"overriden_options": {}
				},
				"radius": {
					"raw_input": 0.2,
					"overriden_options": {}
				},
				"feather": {
					"raw_input": 0.24,
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "position",
					"node": "globals1",
					"output": "gl_PointCoord"
				}
			]
		},
		"constant1": {
			"type": "constant",
			"params": {
				"float": 0.03
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd1": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					},
					"raw_input": 6
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "value",
					"node": "globals1",
					"output": "time"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"attribute1": {
			"type": "attribute",
			"params": {
				"name": "id"
			},
			"connection_points": {
				"in": [],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"round1": {
			"type": "round",
			"params": {
				"in": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "in",
					"node": "attribute1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "in",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"random1": {
			"type": "random",
			"params": {
				"seed": {
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "seed",
					"node": "floatToVec2_1",
					"output": "vec2"
				}
			]
		},
		"floatToVec2_1": {
			"type": "floatToVec2",
			"params": {
				"x": {
					"overriden_options": {}
				},
				"y": {
					"raw_input": 0.54,
					"overriden_options": {}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "x",
					"node": "round1",
					"output": "val"
				}
			]
		},
		"multAdd2": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "value",
					"node": "multAdd5",
					"output": "val"
				},
				{
					"index": 1,
					"inputName": "preAdd",
					"node": "multAdd1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"cos1": {
			"type": "cos",
			"params": {
				"radians": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "radians",
					"node": "multAdd2",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "radians",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd3": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "value",
					"node": "cos1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"fit1": {
			"type": "fit",
			"params": {
				"val": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"srcMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					},
					"raw_input": -1
				},
				"srcMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"destMin": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					},
					"raw_input": 0.22
				},
				"destMax": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "val",
					"node": "cos1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "val",
						"type": "float"
					},
					{
						"name": "srcMin",
						"type": "float"
					},
					{
						"name": "srcMax",
						"type": "float"
					},
					{
						"name": "destMin",
						"type": "float"
					},
					{
						"name": "destMax",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd4": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "value",
					"node": "fit1",
					"output": "val"
				},
				null,
				{
					"index": 2,
					"inputName": "mult",
					"node": "constant1",
					"output": "val"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"multAdd5": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					},
					"raw_input": 4.4
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "value",
					"node": "random1",
					"output": "rand"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		},
		"laserColor1": {
			"type": "laserColor",
			"polyNode": {
				"locked": true
			},
			"params": {
				"baseColor": {
					"type": "vector3",
					"default_value": [0, 0, 0],
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"connection_points": {
				"in": [
					{
						"name": "baseColor",
						"type": "vec3"
					}
				],
				"out": [
					{
						"name": "baseColor",
						"type": "vec3"
					}
				]
			}
		},
		"multAdd6": {
			"type": "multAdd",
			"params": {
				"value": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": false,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"preAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				},
				"mult": {
					"type": "float",
					"default_value": 1,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					},
					"raw_input": 0.33
				},
				"postAdd": {
					"type": "float",
					"default_value": 0,
					"options": {
						"spare": true,
						"editable": true,
						"computeOnDirty": true,
						"dependentOnFoundParam": false
					}
				}
			},
			"inputs": [
				{
					"index": 0,
					"inputName": "value",
					"node": "disk1",
					"output": "float"
				}
			],
			"connection_points": {
				"in": [
					{
						"name": "value",
						"type": "float"
					},
					{
						"name": "preAdd",
						"type": "float"
					},
					{
						"name": "mult",
						"type": "float"
					},
					{
						"name": "postAdd",
						"type": "float"
					}
				],
				"out": [
					{
						"name": "val",
						"type": "float"
					}
				]
			}
		}
	},
	"params": {
		"transparent": true,
		"alphaTest": 0.07,
		"blending": 2
	},
	"persisted_config": {
		"material": {
			"metadata": {
				"version": 4.5,
				"type": "Material",
				"generator": "Material.toJSON"
			},
			"uuid": "/geo1/MAT/pointsBuilder1-main",
			"type": "PointsMaterial",
			"color": 16777215,
			"size": 1,
			"sizeAttenuation": true,
			"blending": 2,
			"transparent": true,
			"depthFunc": 3,
			"depthTest": true,
			"depthWrite": true,
			"colorWrite": true,
			"stencilWrite": false,
			"stencilWriteMask": 255,
			"stencilFunc": 519,
			"stencilRef": 0,
			"stencilFuncMask": 255,
			"stencilFail": 7680,
			"stencilZFail": 7680,
			"stencilZPass": 7680,
			"alphaTest": 0.07,
			"fog": false
		},
		"onBeforeCompileDataJSONWithoutShaders": {
			"paramConfigs": [],
			"timeDependent": true,
			"resolutionDependent": false,
			"raymarchingLightsWorldCoordsDependent": false
		},
		"customMaterials": {
			"customDistanceMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/geo1/MAT/pointsBuilder1-customDistanceMaterial",
					"type": "ShaderMaterial",
					"name": "customDistanceMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"alphaTest": 0.07,
					"forceSinglePass": true,
					"fog": false,
					"glslVersion": null,
					"uniforms": {
						"diffuse": {
							"type": "c",
							"value": 16777215
						},
						"opacity": {
							"value": 1
						},
						"map": {
							"value": null
						},
						"mapTransform": {
							"type": "m3",
							"value": [1, 0, 0, 0, 1, 0, 0, 0, 1]
						},
						"alphaMap": {
							"value": null
						},
						"alphaMapTransform": {
							"type": "m3",
							"value": [1, 0, 0, 0, 1, 0, 0, 0, 1]
						},
						"alphaTest": {
							"value": 0.07
						},
						"displacementMap": {
							"value": null
						},
						"displacementMapTransform": {
							"type": "m3",
							"value": [1, 0, 0, 0, 1, 0, 0, 0, 1]
						},
						"displacementScale": {
							"value": 1
						},
						"displacementBias": {
							"value": 0
						},
						"size": {
							"value": 1
						},
						"scale": {
							"value": 1
						}
					},
					"defines": {
						"USE_SIZEATTENUATION": 1,
						"DEPTH_PACKING": 3200
					},
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n#include <clipping_planes_pars_vertex>\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"lights": false,
					"clipping": false
				},
				"onBeforeCompileDataJSONWithoutShaders": {
					"paramConfigs": [],
					"timeDependent": true,
					"resolutionDependent": false,
					"raymarchingLightsWorldCoordsDependent": false
				}
			},
			"customDepthMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/geo1/MAT/pointsBuilder1-customDepthMaterial",
					"type": "ShaderMaterial",
					"name": "customDepthMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"alphaTest": 0.07,
					"forceSinglePass": true,
					"fog": false,
					"glslVersion": null,
					"uniforms": {
						"diffuse": {
							"type": "c",
							"value": 16777215
						},
						"opacity": {
							"value": 1
						},
						"map": {
							"value": null
						},
						"mapTransform": {
							"type": "m3",
							"value": [1, 0, 0, 0, 1, 0, 0, 0, 1]
						},
						"alphaMap": {
							"value": null
						},
						"alphaMapTransform": {
							"type": "m3",
							"value": [1, 0, 0, 0, 1, 0, 0, 0, 1]
						},
						"alphaTest": {
							"value": 0.07
						},
						"displacementMap": {
							"value": null
						},
						"displacementMapTransform": {
							"type": "m3",
							"value": [1, 0, 0, 0, 1, 0, 0, 0, 1]
						},
						"displacementScale": {
							"value": 1
						},
						"displacementBias": {
							"value": 0
						},
						"size": {
							"value": 1
						},
						"scale": {
							"value": 1
						}
					},
					"defines": {
						"USE_SIZEATTENUATION": 1,
						"DEPTH_PACKING": 3201
					},
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n#include <clipping_planes_pars_vertex>\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n// vHighPrecisionZW is added to match CustomMeshDepth.frag\n// which is itself taken from threejs\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
					"fragmentShader": "\n// INSERT DEFINES\n\n\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\n\t// INSERT BODY\n\t// the new body lines should be added before the alphatest_fragment\n\t// so that alpha is set before (which is really how it would be set if the alphamap_fragment above was used by the material node parameters)\n\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), diffuseColor.a );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
					"lights": false,
					"clipping": false
				},
				"onBeforeCompileDataJSONWithoutShaders": {
					"paramConfigs": [],
					"timeDependent": true,
					"resolutionDependent": false,
					"raymarchingLightsWorldCoordsDependent": false
				}
			},
			"customDepthDOFMaterial": {
				"material": {
					"metadata": {
						"version": 4.5,
						"type": "Material",
						"generator": "Material.toJSON"
					},
					"uuid": "/geo1/MAT/pointsBuilder1-customDepthDOFMaterial",
					"type": "ShaderMaterial",
					"name": "customDepthDOFMaterial",
					"depthFunc": 3,
					"depthTest": true,
					"depthWrite": true,
					"colorWrite": true,
					"stencilWrite": false,
					"stencilWriteMask": 255,
					"stencilFunc": 519,
					"stencilRef": 0,
					"stencilFuncMask": 255,
					"stencilFail": 7680,
					"stencilZFail": 7680,
					"stencilZPass": 7680,
					"alphaTest": 0.07,
					"forceSinglePass": true,
					"fog": false,
					"glslVersion": null,
					"uniforms": {
						"size": {
							"value": 1
						},
						"scale": {
							"value": 1
						},
						"mNear": {
							"value": 0
						},
						"mFar": {
							"value": 10
						}
					},
					"defines": {
						"USE_SIZEATTENUATION": 1
					},
					"vertexShader": "\nuniform float size;\nuniform float scale;\n#include <common>\n\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\n\n\nvoid main() {\n\n\t// INSERT BODY\n\n\n\t#include <project_vertex>\n\n\tvViewZDepth = - mvPosition.z;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\n}\n",
					"fragmentShader": "\nuniform float mNear;\nuniform float mFar;\n\nvarying float vViewZDepth;\n\n// INSERT DEFINES\n\nvoid main() {\n\n\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\n\tgl_FragColor = vec4( vec3( color ), 1.0 );\n\tvec4 diffuseColor = gl_FragColor;\n\n\t// INSERT BODY\n\n\tgl_FragColor.a = diffuseColor.a;\n}\n",
					"lights": false,
					"clipping": false
				},
				"onBeforeCompileDataJSONWithoutShaders": {
					"paramConfigs": [],
					"timeDependent": true,
					"resolutionDependent": false,
					"raymarchingLightsWorldCoordsDependent": false
				}
			}
		}
	}
}
